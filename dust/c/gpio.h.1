<!DOCTYPE html>
<HEAD>
<TITLE>Code Viewer</TITLE>
  <LINK REL="stylesheet" TYPE="text/css" HREF="/comp.css" >
  <META HTTP-EQUIV="content-type" CONTENT="text/html; charset=UTF-8"  >
  <META NAME="description" CONTENT="$$desc$$" >

</HEAD>
<BODY>
  <!-- Navigation bar -->
  <DIV CLASS="navbar">
    <!--    <H1>Gabriel P&eacute;rez-Cerezo</H1>
      -->
    <UL>
      <LI>
	<A HREF="/" >
	  gpcf.eu
	</A>
      </LI>
<!--      <li>
	<a href="/blog" >
	  Blog
	</a>
      </li>-->
      <LI>
	<A HREF="javascript:void(0)" >
	  Projects
	</A>
	<UL>
	  <LI>
	    <A HREF="javascript:void(0)" >
	      Embedded systems
	    </A>
	    <UL>
	      <LI>
		<A HREF="/projects/embedded/c-gpio" >
		  C GPIO headers
		</A>
	      </LI>
	      <LI>
		<A HREF="/projects/embedded/adc/">
		  C headers for the MCP3008 ADC
		</A>
	      </LI>
	      <LI>
		<A HREF="/projects/embedded/python-gpio" >
		  GPIO module for Python
		</A>
	      </LI>
	    </UL>
	  </LI>
	  <LI>	
	    <a href="/grav-mass/cards/" >Grav-Mass Cards</a>
          </li>
	  <LI>
	    <A HREF="http://selbstverteidigung.gpcf.eu" >
	      E-Mail-Selbstverteidigung
	    </A>
	  </LI>
	</UL>
      </LI>
<!--      <LI>
	<A HREF="http://apt.gpcf.eu" >
	  APT repository
	</A>
      </LI> -->
      <LI> 
	<A HREF="/pgp.html">
	  Contact me
	</A>
<!--	<UL>
	  <LI>
	    <A href="/pgp/seahorse-howto.html" >
	      How to add my public key
	    </A>
	  </LI>
	</UL> -->
      </LI>
    </UL>
  </DIV>
<!-- end of navbar -->
<div class="content" ><h3>gpio.h</h3><div id="language-data" >Highlighted as C</div><p class="code_system_toolbar"><a href="?download" >Download this file</A>
<a href="?plain" target="_blank" >Plain text</a><a href="/show-code.py/show-code.py" >Get the source of this system!</a></p><div class="highlight"><pre><span id="code-1"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span id="code-2"><span class="cm">/* </span>
</span><span id="code-3"><span class="cm"> To use this library, you first need to export the pins.</span>
</span><span id="code-4"><span class="cm"> A script to do this on a Raspberry Pi is available at </span>
</span><span id="code-5"><span class="cm"> &lt;http://gpcf.eu/projects/embedded/code/gpio.sh&gt;</span>
</span><span id="code-6">
</span><span id="code-7"><span class="cm">   GPIO.h (C) 2013 Gabriel Perez-Cerezo </span>
</span><span id="code-8"><span class="cm"> Permission is hereby granted, free of charge, to any person obtaining</span>
</span><span id="code-9"><span class="cm"> a copy of this software and associated documentation files (the</span>
</span><span id="code-10"><span class="cm"> &quot;Software&quot;), to deal in the Software without restriction, including</span>
</span><span id="code-11"><span class="cm"> without limitation the rights to use, copy, modify, merge, publish,</span>
</span><span id="code-12"><span class="cm"> distribute, sublicense, and/or sell copies of the Software, and to</span>
</span><span id="code-13"><span class="cm"> permit persons to whom the Software is furnished to do so, subject to</span>
</span><span id="code-14"><span class="cm"> the following conditions:</span>
</span><span id="code-15"><span class="cm"> </span>
</span><span id="code-16"><span class="cm"> The above copyright notice and this permission notice shall be included</span>
</span><span id="code-17"><span class="cm"> in all copies or substantial portions of the Software.</span>
</span><span id="code-18"><span class="cm"> </span>
</span><span id="code-19"><span class="cm"> THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span>
</span><span id="code-20"><span class="cm"> EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span>
</span><span id="code-21"><span class="cm"> MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span>
</span><span id="code-22"><span class="cm"> IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY</span>
</span><span id="code-23"><span class="cm"> CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,</span>
</span><span id="code-24"><span class="cm"> TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE</span>
</span><span id="code-25"><span class="cm"> SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span>
</span><span id="code-26">
</span><span id="code-27"><span class="cm">*/</span>
</span><span id="code-28">
</span><span id="code-29"><span class="k">const</span> <span class="kt">char</span> <span class="n">path</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;/sys/class/gpio/gpio&quot;</span><span class="p">;</span>
</span><span id="code-30"><span class="kt">char</span> <span class="n">pinpath</span><span class="p">[</span><span class="mi">40</span><span class="p">];</span>
</span><span id="code-31">
</span><span id="code-32">
</span><span id="code-33"><span class="kt">void</span> <span class="nf">gpio_init</span><span class="p">(</span><span class="kt">int</span> <span class="n">pin</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">direction</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// sets the direction of a pin. Allowed values are &quot;in&quot; and &quot;out&quot;</span>
</span><span id="code-34">  <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span id="code-35">  <span class="n">sprintf</span><span class="p">(</span><span class="n">pinpath</span><span class="p">,</span> <span class="s">&quot;%s%d/direction&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span>  <span class="n">pin</span><span class="p">);</span>
</span><span id="code-36">  <span class="n">f</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">pinpath</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">);</span>
</span><span id="code-37">  <span class="n">fprintf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;%s&quot;</span><span class="p">,</span> <span class="n">direction</span><span class="p">);</span>
</span><span id="code-38">  <span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span id="code-39"><span class="p">}</span>
</span><span id="code-40">
</span><span id="code-41"><span class="kt">void</span> <span class="nf">gpio_write</span><span class="p">(</span><span class="kt">int</span> <span class="n">pin</span><span class="p">,</span> <span class="kt">int</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// sets the output value of the pin. Allowed values are 1 and 0.</span>
</span><span id="code-42">  <span class="n">sprintf</span><span class="p">(</span><span class="n">pinpath</span><span class="p">,</span> <span class="s">&quot;%s%d/value&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">pin</span><span class="p">);</span>
</span><span id="code-43">  <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span id="code-44">  <span class="n">f</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">pinpath</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">);</span>
</span><span id="code-45">  <span class="n">fprintf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span id="code-46">  <span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span id="code-47"><span class="p">}</span>
</span><span id="code-48">
</span><span id="code-49"><span class="kt">int</span> <span class="nf">gpio_read</span><span class="p">(</span><span class="kt">int</span> <span class="n">pin</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// reads input value from the specified GPIO pin. Returns 1 or 0.</span>
</span><span id="code-50">  <span class="n">sprintf</span><span class="p">(</span><span class="n">pinpath</span><span class="p">,</span> <span class="s">&quot;%s%d/value&quot;</span><span class="p">,</span> <span class="n">path</span><span class="p">,</span> <span class="n">pin</span><span class="p">);</span>
</span><span id="code-51">  <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span><span class="p">;</span>
</span><span id="code-52">  <span class="n">f</span> <span class="o">=</span> <span class="n">fopen</span><span class="p">(</span><span class="n">pinpath</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span id="code-53">  <span class="kt">int</span> <span class="n">x</span><span class="p">;</span>
</span><span id="code-54">  <span class="k">if</span> <span class="p">((</span><span class="n">x</span> <span class="o">=</span> <span class="n">fgetc</span><span class="p">(</span><span class="n">f</span><span class="p">))</span><span class="o">!=</span><span class="n">EOF</span><span class="p">){</span>
</span><span id="code-55">    <span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">x</span><span class="o">==</span><span class="mi">49</span><span class="p">);</span> <span class="cm">/* Returns 1 if the input value is HIGH. (fgetc returns 49 when the input value is HIGH). Returns 0 if it is low.</span>
</span><span id="code-56"><span class="cm">		   */</span>
</span><span id="code-57">  <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span id="code-58">    <span class="n">x</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>        <span class="c1">// -1 is returned when there is an error.</span>
</span><span id="code-59">  <span class="p">}</span>
</span><span id="code-60">  <span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span id="code-61">  <span class="k">return</span> <span class="n">x</span><span class="p">;</span>       
</span><span id="code-62"><span class="p">}</span>
</span><span id="code-63">  
</span></pre></div>
</div>
<div>
  <div class="footer" >
    gpcf.eu &copy; 2013-2014 Gabriel P&eacute;rez-Cerezo. <br>  
    <!--    <br><a href="/show-code.py/styles.css" >View my CSS stylesheet</a> -->
    <a href="https://gnu.org/s/emacs" ><img src="/made-with-emacs.png" alt="Made with Emacs" ></a>
  </div>
  <div CLASS="footer" >
    <a href="https://fsf.org/fb" >
      <img src="https://static.fsf.org/nosvn/no-facebook-me.png" alt="I'm not on Facebook" width="200">
    </a>
  </div>
</div>

</body>
</html>

